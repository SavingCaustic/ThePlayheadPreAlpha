#include "Effect/EffectBase.h"
#include "Effect/EffectFactory.h"
#include "Synth/SynthBase.h"
#include "Synth/SynthFactory.h"
#include "api/endpointsCrow.h"
#include "constants.h"
#include "core/audio/AudioMath.h"
#include "core/destructor/Worker.h"
#include "core/errors/AudioErrorBuffer.h"
#include "core/errors/ErrorBuffer.h"
#include "core/errors/ErrorHandler.h"
#include "core/errors/ErrorLogger.h"
#include "core/messages/MessageInBuffer.h"
#include "core/messages/MessageOutBuffer.h"
#include "core/messages/MessageOutReader.h"
#include "core/parameters/SettingsManager.h"
#include "core/player/PlayerEngine.h"
#include "core/player/Rack.h"
#include "core/runner/StudioRunner.h"
#include "crow.h"
#include "drivers/AudioDriver.h"
#include "drivers/AudioManager.h"
#include "drivers/FileDriver.h"
#include "drivers/MidiManager.h"
#include <atomic>
#include <chrono>
#include <filesystem>
#include <iostream>
#include <nlohmann/json.hpp>
#include <string>
#include <thread>
#include <unordered_map>
#include <variant>

/*
 * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  ### # # ###   ##  #    #  # # # # ###  #  ##   *
 *   #  ### ##    ### #   ###  #  ### ##  ### # #  *
 *   #  # # ###   #   ### # #  #  # # ### # # ##   *
 * * * * * * * * * * * * * * * * * * * * * * * * * *
 */

#define DEBUG_MODE 1

// Define the global shutdown flag. Set by endpoint shutdown and signal_handler below
std::atomic<bool> shutdown_flag(false);

// Custom signal handler. Working well.
void signal_handler(int signal) {
    if (signal == SIGINT) {
        std::cout << "Caught SIGINT (Ctrl+C), setting shutdown flag..." << std::endl;
        shutdown_flag = true;
    }
}

// Global objects. Could possibly be hierarchial but could lead to poor testing environments.
PlayerEngine sPlayerEngine;
MessageInBuffer sMessageInBuffer(8);
MessageOutBuffer sMessageOutBuffer;
MessageOutReader sMessageOutReader(sMessageOutBuffer, nullptr); // Initialize without connection

AudioDriver sAudioDriver;
// AudioManager sAudioManager(sAudioDriver, sPlayerEngine);
// MidiManager sMidiManager;

// Add global ErrorHandler
// AudioErrorBuffer sAudioErrorBuffer;                            // Error buffer used by the audio engine
// ErrorBuffer sErrorBuffer;                                      // Main error buffer for logging
// ErrorHandler sErrorHandler(&sAudioErrorBuffer, &sErrorBuffer); // Error handler with threads

// DestructorBuffer
// Destructor::Queue sDestructorQueue;
// Destructor::Worker sDestructorWorker(sDestructorQueue);

// StudioRunner - performing various low-prio task (micro-scheduler)
// StudioRunner sStudioRunner(sMidiManager, sAudioManager);

// Entry point of the program
int main() {
    // Create the object
    std::cout << "early exit" << std::endl;
    return 0;
}